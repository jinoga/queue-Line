// server.js (‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)

// 1. ‡πÇ‡∏´‡∏•‡∏î Environment Variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î
//require('dotenv').config();

const express = require('express');
const axios = require('axios');
const crypto = require('crypto');
const { createClient } = require('@supabase/supabase-js');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

// --- 2. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Config ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å Environment Variables ---
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
const PORT = process.env.PORT || 3001;

// --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Config ---
if (!LINE_CHANNEL_ACCESS_TOKEN || !LINE_CHANNEL_SECRET || !SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
    console.error("‚ùå CRITICAL ERROR: ‡∏Ñ‡πà‡∏≤ config ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (Supabase ‡∏´‡∏£‡∏∑‡∏≠ LINE) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env file");
    console.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå .env ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:");
    console.error("  - LINE_CHANNEL_ACCESS_TOKEN");
    console.error("  - LINE_CHANNEL_SECRET");
    console.error("  - SUPABASE_URL");
    console.error("  - SUPABASE_SERVICE_KEY");
    process.exit(1); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
}

// --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase Client ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ---
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);


// ---------------------------------------------------------------- //
//                                                                  //
//           ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß)           //
//                                                                  //
// ---------------------------------------------------------------- //


// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô Line Webhook
function verifySignature(body, signature) {
    const hash = crypto
        .createHmac('sha256', LINE_CHANNEL_SECRET)
        .update(body, 'utf-8')
        .digest('base64');
    return hash === signature;
}

// üéØ ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Line Webhook - ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.post('/webhook/line', async (req, res) => {
    const signature = req.headers['x-line-signature'];
    const body = JSON.stringify(req.body);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    if (!verifySignature(body, signature)) {
        console.log('‚ùå Invalid signature');
        return res.status(401).send('Unauthorized');
    }

    const events = req.body.events;
    console.log('üì® Received events:', events.length);
    
    for (const event of events) {
        try {
            if (event.type === 'message' && event.message.type === 'text') {
                await handleTextMessage(event);
            } else if (event.type === 'follow') {
                await handleFollow(event);
            } else if (event.type === 'unfollow') {
                await handleUnfollow(event);
            }
        } catch (error) {
            console.error('Error handling event:', error);
        }
    }

    res.status(200).send('OK');
});

// üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
async function handleTextMessage(event) {
    const userId = event.source.userId;
    const messageText = event.message.text.trim();
    
    console.log(`üì± User ${userId} sent: "${messageText}"`);
    
    // 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (4-5 ‡∏´‡∏•‡∏±‡∏Å)
    const queueMatch = messageText.match(/^(\d{4,5})$/);
    
    if (queueMatch) {
        const queueNumber = queueMatch[1];
        console.log(`üéØ Queue registration: ${queueNumber}`);
        
        // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß
        await registerQueueTracking(userId, queueNumber);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        await replyMessage(event.replyToken, [
            {
                type: 'text',
                text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n\nüéØ ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: ${queueNumber}\nüîî ‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠:\n   ‚Ä¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3 ‡∏Ñ‡∏¥‡∏ß (‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß)\n   ‚Ä¢ ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå)\n\nüí° ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ:\n   ‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏ä‡πá‡∏Ñ" = ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß\n   ‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏´‡∏¢‡∏∏‡∏î" = ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°\n   ‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà = ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏¥‡∏ß`
            }
        ]);
        
    } 
    // 2Ô∏è‚É£ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
    else if (['‡πÄ‡∏ä‡πá‡∏Ñ', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'check', 'status'].includes(messageText.toLowerCase())) {
        console.log(`üìä Status check by: ${userId}`);
        await checkQueueStatus(userId, event.replyToken);
    } 
    // 3Ô∏è‚É£ ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    else if (['‡∏´‡∏¢‡∏∏‡∏î', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'stop', 'cancel'].includes(messageText.toLowerCase())) {
        console.log(`‚ùå Stop tracking by: ${userId}`);
        await stopQueueTracking(userId);
        await replyMessage(event.replyToken, [
            {
                type: 'text',
                text: '‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß\n\nüìù ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà:\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß 4-5 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 1234)'
            }
        ]);
    } 
    // 4Ô∏è‚É£ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    else {
        await replyMessage(event.replyToken, [
            {
                type: 'text',
                text: `üè¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏ß\n‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå\n\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n\n1Ô∏è‚É£ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß\n   ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß 4-5 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 1234)\n\n2Ô∏è‚É£ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\n   ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏ä‡πá‡∏Ñ"\n\n3Ô∏è‚É£ ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°\n   ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏´‡∏¢‡∏∏‡∏î"\n\nüïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 06:00-18:00 ‡∏ô.\nüí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥!`
            }
        ]);
    }
}

// üëã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
async function handleFollow(event) {
    const userId = event.source.userId;
    console.log(`üëã New follower: ${userId}`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const profile = await getUserProfile(userId);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { error } = await supabase
        .from('line_users')
        .upsert({
            line_user_id: userId,
            display_name: profile?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        });

    if (error) {
        console.error('Error saving user:', error);
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
    await replyMessage(event.replyToken, [
        {
            type: 'text',
            text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏ß!\n\nüëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${profile?.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}\n\nüè¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå\n\nüìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n1. ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (4-5 ‡∏´‡∏•‡∏±‡∏Å)\n2. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏û‡∏¥‡∏°‡∏û‡πå "1234"\n\nüïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 06:00-18:00 ‡∏ô.`
        }
    ]);
}

// üëã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
async function handleUnfollow(event) {
    const userId = event.source.userId;
    console.log(`üëã User unfollowed: ${userId}`);
    
    await supabase
        .from('line_users')
        .update({ 
            is_active: false, 
            tracked_queue: null,
            updated_at: new Date().toISOString()
        })
        .eq('line_user_id', userId);
}

// üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß
async function registerQueueTracking(userId, queueNumber) {
    const { error } = await supabase
        .from('line_users')
        .upsert({
            line_user_id: userId,
            tracked_queue: queueNumber,
            is_active: true,
            updated_at: new Date().toISOString()
        });

    if (error) {
        console.error('Error registering queue:', error);
        throw error;
    }

    console.log(`‚úÖ Registered queue ${queueNumber} for user ${userId}`);
}

// ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß
async function stopQueueTracking(userId) {
    const { error } = await supabase
        .from('line_users')
        .update({ 
            tracked_queue: null,
            updated_at: new Date().toISOString()
        })
        .eq('line_user_id', userId);

    if (error) {
        console.error('Error stopping tracking:', error);
        throw error;
    }

    console.log(`‚ùå Stopped tracking for user ${userId}`);
}

// üìä ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
async function checkQueueStatus(userId, replyToken) {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        const { data: user, error: userError } = await supabase
            .from('line_users')
            .select('tracked_queue, display_name')
            .eq('line_user_id', userId)
            .single();

        if (userError || !user?.tracked_queue) {
            await replyMessage(replyToken, [
                {
                    type: 'text',
                    text: '‚ùì ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏î‡πÜ\n\nüìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß 4-5 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 1234)'
                }
            ]);
            return;
        }

        const queueNumber = user.tracked_queue;
        console.log(`üìä Checking status for queue ${queueNumber}`);

        // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        const queueStatus = await getDetailedQueueStatus(queueNumber);
        
        await replyMessage(replyToken, [
            {
                type: 'text',
                text: `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß ${queueNumber}\nüë§ ${user.display_name}\n\n${queueStatus}\n\nüîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date().toLocaleTimeString('th-TH')}\n\nüí° ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏ä‡πá‡∏Ñ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà`
            }
        ]);

    } catch (error) {
        console.error('Error checking queue status:', error);
        await replyMessage(replyToken, [
            {
                type: 'text',
                text: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
            }
        ]);
    }
}

// üîç ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
async function getDetailedQueueStatus(queueNumber) {
    try {
        const counterId = getCounterIdFromQueue(queueNumber);
        
        if (!counterId) {
            return '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nüí° ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 4-5 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 1234, 10001)';
        }

        // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô
        const { data, error } = await supabase
            .from('queue_snapshots')
            .select('current_queue, created_at')
            .eq('current_counter', counterId)
            .order('current_queue', { ascending: false })
            .limit(1);

        if (error) {
            console.error('Supabase error:', error);
            return '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        }

        if (!data?.length) {
            return `‚ùì ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå ${counterId}\nüí° ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£`;
        }

        const latestCalled = parseInt(data[0].current_queue);
        const userQueue = parseInt(queueNumber);
        const lastUpdate = new Date(data[0].created_at).toLocaleTimeString('th-TH');
        
        if (userQueue < latestCalled) {
            return `üö´ ‡∏Ñ‡∏¥‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!\nüìç ‡∏Ñ‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å: ${latestCalled}\n‚è∞ ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${lastUpdate}\n\nüí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå ${counterId}`;
        } 
        else if (userQueue === latestCalled) {
            return `üéØ ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß!\nüèÉ‚Äç‚ôÇÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå ${counterId} ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ\n‚è∞ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${lastUpdate}`;
        } 
        else {
            const remaining = userQueue - latestCalled;
            let statusEmoji = '';
            let statusText = '';
            
            if (remaining <= 3) {
                statusEmoji = '‚ö†Ô∏è';
                statusText = '‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß!';
            } else if (remaining <= 10) {
                statusEmoji = 'üü°';
                statusText = '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ';
            } else {
                statusEmoji = '‚è≥';
                statusText = '‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
            }
            
            return `${statusEmoji} ${statusText}\nüìä ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${remaining} ‡∏Ñ‡∏¥‡∏ß\nüìç ‡∏Ñ‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å: ${latestCalled}\nü™ü ‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå: ${counterId}\n‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastUpdate}`;
        }
    } catch (error) {
        console.error('Error getting queue status:', error);
        return '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ';
    }
}

// üî¢ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏õ‡πá‡∏ô ID ‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå
function getCounterIdFromQueue(queueNo) {
    const num = parseInt(String(queueNo).trim(), 10);
    if (isNaN(num)) return null;
    
    if (num >= 1001 && num <= 1999) return 1;
    if (num >= 2001 && num <= 2999) return 2;
    if (num >= 3001 && num <= 3999) return 3;
    if (num >= 4001 && num <= 4999) return 4;
    if (num >= 5001 && num <= 5999) return 5;
    if (num >= 6001 && num <= 6999) return 6;
    if (num >= 7001 && num <= 7999) return 7;
    if (num >= 8001 && num <= 8999) return 8;
    if (num >= 9001 && num <= 9999) return 9;
    if (num >= 10001 && num <= 10999) return 10;
    
    return null;
}

// üë§ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
async function getUserProfile(userId) {
    try {
        const response = await axios.get(`https://api.line.me/v2/bot/profile/${userId}`, {
            headers: {
                'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('Error getting user profile:', error);
        return null;
    }
}

// üí¨ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function replyMessage(replyToken, messages) {
    try {
        await axios.post('https://api.line.me/v2/bot/message/reply', {
            replyToken,
            messages
        }, {
            headers: {
                'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });
        console.log('‚úÖ Reply sent successfully');
    } catch (error) {
        console.error('‚ùå Error replying message:', error.response?.data || error.message);
        throw error;
    }
}

// üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
async function pushMessage(userId, messages) {
    try {
        await axios.post('https://api.line.me/v2/bot/message/push', {
            to: userId,
            messages
        }, {
            headers: {
                'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });
        console.log(`‚úÖ Push message sent to ${userId}`);
    } catch (error) {
        console.error(`‚ùå Error pushing message to ${userId}:`, error.response?.data || error.message);
        throw error;
    }
}

// üîî ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)
async function checkAndNotifyAllUsers() {
    try {
        console.log('üîç Starting notification check...');
        
        // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß
        const { data: users, error } = await supabase
            .from('line_users')
            .select('line_user_id, tracked_queue, display_name')
            .not('tracked_queue', 'is', null)
            .eq('is_active', true);

        if (error) {
            console.error('Error fetching users:', error);
            return { success: false, error: error.message };
        }

        console.log(`üë• Found ${users.length} users tracking queues`);

        let notificationsSent = 0;
        
        for (const user of users) {
            try {
                const notified = await checkAndNotifyUser(user);
                if (notified) notificationsSent++;
            } catch (error) {
                console.error(`Error notifying user ${user.line_user_id}:`, error);
            }
        }

        console.log(`üîî Sent ${notificationsSent} notifications`);
        return { 
            success: true, 
            totalUsers: users.length, 
            notificationsSent 
        };

    } catch (error) {
        console.error('Error in notification system:', error);
        return { success: false, error: error.message };
    }
}

// üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
async function checkAndNotifyUser(user) {
    const { line_user_id: userId, tracked_queue: queueNumber, display_name: displayName } = user;
    
    try {
        const counterId = getCounterIdFromQueue(queueNumber);
        if (!counterId) return false;

        // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const { data, error } = await supabase
            .from('queue_snapshots')
            .select('current_queue')
            .eq('current_counter', counterId)
            .order('current_queue', { ascending: false })
            .limit(1);

        if (error || !data?.length) return false;

        const latestCalled = parseInt(data[0].current_queue);
        const userQueue = parseInt(queueNumber);
        const remaining = userQueue - latestCalled;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const notificationKey = `${userId}_${queueNumber}`;

        if (userQueue === latestCalled) {
            // üéØ ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß!
            if (!notificationCache.has(`${notificationKey}_current`)) {
                await pushMessage(userId, [{
                    type: 'text',
                    text: `üéØ ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß!\n\nüë§ ${displayName}\nüì¢ ‡∏Ñ‡∏¥‡∏ß ${queueNumber}\nüèÉ‚Äç‚ôÇÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå ${counterId} ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!\n\nüè¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå\n‚è∞ ${new Date().toLocaleTimeString('th-TH')}`
                }]);
                
                notificationCache.set(`${notificationKey}_current`, Date.now());
                console.log(`üéØ Sent CURRENT notification to ${userId} for queue ${queueNumber}`);
                return true;
            }
        } 
        else if (remaining <= 3 && remaining > 0) {
            // ‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß!
            if (!notificationCache.has(`${notificationKey}_near`)) {
                await pushMessage(userId, [{
                    type: 'text',
                    text: `‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß!\n\nüë§ ${displayName}\nüì¢ ‡∏Ñ‡∏¥‡∏ß ${queueNumber}\n‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${remaining} ‡∏Ñ‡∏¥‡∏ß\nüö∂‚Äç‚ôÇÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°\n\nüí° ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏ä‡πá‡∏Ñ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î`
                }]);
                
                notificationCache.set(`${notificationKey}_near`, Date.now());
                console.log(`‚ö†Ô∏è Sent NEAR notification to ${userId} for queue ${queueNumber} (${remaining} remaining)`);
                return true;
            }
        }
        else if (userQueue < latestCalled) {
            // üö´ ‡∏Ñ‡∏¥‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            if (!notificationCache.has(`${notificationKey}_passed`)) {
                await pushMessage(userId, [{
                    type: 'text',
                    text: `üö´ ‡∏Ñ‡∏¥‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!\n\nüë§ ${displayName}\nüì¢ ‡∏Ñ‡∏¥‡∏ß ${queueNumber}\nüìç ‡∏Ñ‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å: ${latestCalled}\n\nüí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏≤‡∏ô‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå ${counterId}\nüîÑ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà`
                }]);
                
                notificationCache.set(`${notificationKey}_passed`, Date.now());
                console.log(`üö´ Sent PASSED notification to ${userId} for queue ${queueNumber}`);
                return true;
            }
        }

        return false;
    } catch (error) {
        console.error(`Error checking user ${userId} queue ${queueNumber}:`, error);
        return false;
    }
}

// üíæ Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
const notificationCache = new Map();

// ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(() => {
    const now = Date.now();
    for (const [key, timestamp] of notificationCache.entries()) {
        if (now - timestamp > 30 * 60 * 1000) { // 30 minutes
            notificationCache.delete(key);
        }
    }
    console.log(`üßπ Cleaned notification cache. Current size: ${notificationCache.size}`);
}, 30 * 60 * 1000);

// üåê API Endpoints

// 1Ô∏è‚É£ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
app.post('/api/notify-queue-updates', async (req, res) => {
    console.log('üì° Queue update notification triggered');
    const result = await checkAndNotifyAllUsers();
    res.json(result);
});

// 2Ô∏è‚É£ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
app.post('/api/broadcast', async (req, res) => {
    const { message } = req.body;
    
    if (!message) {
        return res.status(400).json({ error: 'Message is required' });
    }

    try {
        const { data: users } = await supabase
            .from('line_users')
            .select('line_user_id')
            .eq('is_active', true);

        let sentCount = 0;
        for (const user of users) {
            try {
                await pushMessage(user.line_user_id, [{
                    type: 'text',
                    text: `üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®\n\n${message}\n\nüè¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå`
                }]);
                sentCount++;
            } catch (error) {
                console.error(`Failed to send broadcast to ${user.line_user_id}`);
            }
        }

        res.json({ success: true, sent: sentCount, total: users.length });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 3Ô∏è‚É£ API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
app.get('/api/status', async (req, res) => {
    try {
        const { data: totalUsers } = await supabase
            .from('line_users')
            .select('id', { count: 'exact' })
            .eq('is_active', true);

        const { data: trackingUsers } = await supabase
            .from('line_users')
            .select('id', { count: 'exact' })
            .not('tracked_queue', 'is', null)
            .eq('is_active', true);

        res.json({
            status: 'running',
            totalUsers: totalUsers?.length || 0,
            trackingUsers: trackingUsers?.length || 0,
            notificationCacheSize: notificationCache.size,
            uptime: process.uptime(),
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 4Ô∏è‚É£ API ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.get('/api/users', async (req, res) => {
    try {
        const { data: users, error } = await supabase
            .from('line_users')
            .select('display_name, tracked_queue, created_at, updated_at')
            .eq('is_active', true)
            .order('updated_at', { ascending: false });

        if (error) throw error;

        res.json({
            success: true,
            users: users.map(user => ({
                name: user.display_name,
                queue: user.tracked_queue,
                joinedAt: user.created_at,
                lastActive: user.updated_at
            }))
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 5Ô∏è‚É£ API ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
app.post('/api/test-notification', async (req, res) => {
    const { userId, message } = req.body;
    
    try {
        await pushMessage(userId, [{
            type: 'text',
            text: message || 'üß™ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö\n\n‡∏´‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!'
        }]);
        
        res.json({ success: true, message: 'Test message sent' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(async () => {
    try {
        const result = await checkAndNotifyAllUsers();
        if (result.success && result.notificationsSent > 0) {
            console.log(`üîî Auto-check completed: ${result.notificationsSent} notifications sent`);
        }
    } catch (error)
    {
        console.error('‚ùå Error in auto-check:', error);
    }
}, 30000); // 30 seconds

// üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(PORT, () => {
    console.log(`üöÄ Line Notification Server running on port ${PORT}`);
    console.log(`üì° Webhook URL: http://localhost:${PORT}/webhook/line`);
    console.log(`üîî Auto-notification: Active (every 30 seconds)`);
    console.log(`üìä Status check: http://localhost:${PORT}/api/status`);
});

// üîß ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë Received SIGTERM, shutting down gracefully...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üõë Received SIGINT, shutting down gracefully...');
    process.exit(0);
});

module.exports = app;
